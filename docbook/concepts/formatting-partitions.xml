<section xml:id="VDG-Concepts-Formatting-Partitions"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink">

  <title>Formatting Partitions</title>

  <para>
    Unlike <systemitem class="resource">/dev/sda</systemitem> we can't
    just create a partition on the <systemitem
    class="resource">loop0</systemitem> device by addressing it as
    <systemitem class="resource">/dev/loop0</systemitem>. This is
    because the kernel has no device created to represent it. Instead
    we'll have to create another device associated with a specific
    <firstterm>offset</firstterm> in our device/file.
  </para>

  <remark>TODO: Rephrase the above paragraph ^ wrt: device representation</remark>

  <qandaset defaultlabel="qanda">
    <!-- Don't generate a table of contents for QandASets -->
    <?dbhtml toc="0" ?>
    <qandaentry>
      <question>
        <para>
          What is an <literal>offset</literal>, and why do we have to
          specify one?
        </para>
      </question>
      <answer>
        <para>
          An <literal>offset</literal> indicates how far from the
          beginning of a device something is.
        </para>

        <para>
          The first partition is not located at the beginning of the
          device. That is where the Master Boot Record
          (<acronym>MBR</acronym>) is stored
          (<literal>offset=0</literal>). If we tried to create a
          partition at <literal>offset=0</literal> we would overwrite
          the MBR. Knowing the offset will allow us to create a device
          mapped to where the first partition begins without
          overwriting the MBR. Linux does this automatically for
          regular disks during the boot process.
        </para>
      </answer>
    </qandaentry>

    <qandaentry>
      <question>
        <para>
          Why doesn't the first partition begin after the MBR?
          Specifically, why is there empty space between the first
          sector (where the MBR is stored) and the first partition?
        </para>
      </question>
      <answer>
        <para>
          It's complicated, but worth learning about. See the appendix
          <link linkend="VDG-Appendix-Disk-Drive-History">on disk
          drive history</link> for a complete explanation.
        </para>

        <para>
	  Here's the short answer: In current PC MBRs there may be up
	  to 446B of executable code, and a partition table containing
	  up to 64B of data. When you add in another 2B to record a
	  <firstterm>Boot Signature</firstterm> you have 512B, which
	  up until recently happened to be the typical size of one
	  sector.
	</para>

	<para>
	  Partitioning tools historically left the space between the
	  MBR and the second cylinder empty. Modern boot loaders
	  (<link
	  xl:href="http://en.wikipedia.org/wiki/NTLDR">NTLDR</link>,
	  <link
	  xl:href="http://www.gnu.org/software/grub/">GRUB</link>,
	  etc) use this space to store <emphasis>additional</emphasis>
	  code and data necessary to boot the system

	  <footnote><para>
	    <link xl:href="http://www.gnu.org/software/grub/manual/grub.html#BIOS-installation">GRUB: BIOS Installation</link>
	  </para></footnote>

	  <footnote><para>
	    <link xl:href="http://moi.vonos.net/linux/Booting_Linux_on_x86_with_Grub2/#installing-grub">Simon Kitching: Booting Linux on x86 using Grub2</link>
	  </para></footnote>

	  .
	</para>

	<para>
	  Some software, such as licensing managers and virus
	  scanners, also use this space to store files.
        </para>
      </answer>
    </qandaentry>

    <qandaentry>
      <question>
        <para>
          How do we calculate the offset to specify?
        </para>
      </question>
      <answer>
        <para>
          To calculate the offset we need to know what sector the
          partition (<systemitem
          class="resource">loop0p1</systemitem>) starts
          on. <command>fdisk</command> can give us this
          information. (Spoiler: 9 times out of 10 the offset for the
          first partition will be <literal>512 * 63 =
          32256</literal>).
        </para>
      </answer>
    </qandaentry>
  </qandaset>

  <para>
    Print the partition table using <command>fdisk</command> with the
    <option>-u</option> option to switch the printing format to
    sectors instead of cylinders for units.
  </para>

  <screen><xi:include href="../examples/concepts-formatting-partitions01" parse="text"/></screen>

  <para>
    <systemitem class="resource">/dev/loop0p1</systemitem> is
    our first partition and from the table above we know that it
    starts on sector 63. Since we have to specify offsets in
    bytes we multiply 63 by 512 (the default block size) to
    obtain an offset of 32256 bytes.
  </para>

  <screen><xi:include href="../examples/concepts-formatting-partitions02" parse="text"/></screen>

  <para>
    Now that we have <systemitem
    class="resource">/dev/loop1</systemitem> representing
    partition of our virtual disk we can create a filesystem on
    it and finally mount it.
  </para>

  <example xml:id="VDG-Concepts-Example-Partition-Formating">
    <title>Formatting the partition</title>

    <screen><xi:include href="../examples/concepts-formatting-partitions03" parse="text"/></screen>
  </example>

  <note>
    <para>
      The same procedure applies to any arbitrary partition:
      obtain the starting sector, multiply by block size.
    </para>
  </note>
</section>
